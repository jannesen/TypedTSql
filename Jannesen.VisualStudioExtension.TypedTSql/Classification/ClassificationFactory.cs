using System;
using Microsoft.VisualStudio.Text.Classification;
using LTTS_Core = Jannesen.Language.TypedTSql.Core;
using LTTS_DM   = Jannesen.Language.TypedTSql.DataModel;

namespace Jannesen.VisualStudioExtension.TypedTSql.Classification
{
    internal class ClassificationFactory
    {
        public      readonly    IClassificationType                             cfComment;
        public      readonly    IClassificationType                             cfName;
        public      readonly    IClassificationType                             cfNumber;
        public      readonly    IClassificationType                             cfString;
        public      readonly    IClassificationType                             cfOperator;
        public      readonly    IClassificationType                             cfKeyword;
        public      readonly    IClassificationType                             cfLocalVariable;
        public      readonly    IClassificationType                             cfGlobalVariable;
        public      readonly    IClassificationType                             cfBuildIn;
        public      readonly    IClassificationType                             cfType;
        public      readonly    IClassificationType                             cfTable;
        public      readonly    IClassificationType                             cfView;
        public      readonly    IClassificationType                             cfFunction;
        public      readonly    IClassificationType                             cfStoredProcedure;
        public      readonly    IClassificationType                             cfParameter;
        public      readonly    IClassificationType                             cfColumn;
        public      readonly    IClassificationType                             cfUDTValue;

        public                                                                  ClassificationFactory(IClassificationTypeRegistryService registry)
        {
            cfComment         = registry.GetClassificationType(ClassificationTypes.Comment);
            cfName            = registry.GetClassificationType(ClassificationTypes.Name);
            cfNumber          = registry.GetClassificationType(ClassificationTypes.Number);
            cfString          = registry.GetClassificationType(ClassificationTypes.String);
            cfOperator        = registry.GetClassificationType(ClassificationTypes.Operator);
            cfKeyword         = registry.GetClassificationType(ClassificationTypes.Keyword);
            cfLocalVariable   = registry.GetClassificationType(ClassificationTypes.LocalVariable);
            cfGlobalVariable  = registry.GetClassificationType(ClassificationTypes.GlobalVariable);
            cfBuildIn         = registry.GetClassificationType(ClassificationTypes.BuildIn);
            cfType            = registry.GetClassificationType(ClassificationTypes.Type);
            cfTable           = registry.GetClassificationType(ClassificationTypes.Table);
            cfView            = registry.GetClassificationType(ClassificationTypes.View);
            cfFunction        = registry.GetClassificationType(ClassificationTypes.Function);
            cfStoredProcedure = registry.GetClassificationType(ClassificationTypes.StoredProcedure);
            cfParameter       = registry.GetClassificationType(ClassificationTypes.Parameter);
            cfColumn          = registry.GetClassificationType(ClassificationTypes.Column);
            cfUDTValue        = registry.GetClassificationType(ClassificationTypes.UDTValue);
        }

        public                  IClassificationType                             TokenClassificationType(LTTS_Core.Token token)
        {
            var symbol = (token as LTTS_Core.TokenWithSymbol)?.Symbol;

            if (symbol != null) {
                switch(symbol.Type) {
                case LTTS_DM.SymbolType.BuildinFunction:                        return cfBuildIn;
                case LTTS_DM.SymbolType.TypeUser:                               return cfType;
                case LTTS_DM.SymbolType.TypeExternal:                           return cfType;
                case LTTS_DM.SymbolType.TypeTable:                              return cfType;
                case LTTS_DM.SymbolType.TableInternal:                          return cfTable;
                case LTTS_DM.SymbolType.TableSystem:                            return cfTable;
                case LTTS_DM.SymbolType.TableUser:                              return cfTable;
                case LTTS_DM.SymbolType.View:                                   return cfView;
                case LTTS_DM.SymbolType.Function:                               return cfFunction;
                case LTTS_DM.SymbolType.FunctionScalar:                         return cfFunction;
                case LTTS_DM.SymbolType.FunctionScalar_clr:                     return cfFunction;
                case LTTS_DM.SymbolType.FunctionInlineTable:                    return cfFunction;
                case LTTS_DM.SymbolType.FunctionMultistatementTable:            return cfFunction;
                case LTTS_DM.SymbolType.FunctionMultistatementTable_clr:        return cfFunction;
                case LTTS_DM.SymbolType.FunctionAggregateFunction_clr:          return cfFunction;
                case LTTS_DM.SymbolType.StoredProcedure:                        return cfStoredProcedure;
                case LTTS_DM.SymbolType.StoredProcedure_clr:                    return cfStoredProcedure;
                case LTTS_DM.SymbolType.StoredProcedure_extended:               return cfStoredProcedure;
                case LTTS_DM.SymbolType.Parameter:                              return cfParameter;
                case LTTS_DM.SymbolType.Column:                                 return cfColumn;
                case LTTS_DM.SymbolType.UDTValue:                               return cfUDTValue;
                }
            }

            switch(token.ID) {
            case LTTS_Core.TokenID.BlockComment:                    return cfComment;
            case LTTS_Core.TokenID.LineComment:                     return cfComment;
            case LTTS_Core.TokenID.Name:                            return token.isKeyword ? cfKeyword : cfName;
            case LTTS_Core.TokenID.QuotedName:                      return cfName;
            case LTTS_Core.TokenID.LocalName:                       return (token.Text.StartsWith("@@", StringComparison.Ordinal) ? cfGlobalVariable : cfLocalVariable);
            case LTTS_Core.TokenID.String:                          return cfString;
            case LTTS_Core.TokenID.Number:                          return cfNumber;
            case LTTS_Core.TokenID.BinaryValue:                     return cfNumber;

            case LTTS_Core.TokenID.Equal:                           return cfOperator;
            case LTTS_Core.TokenID.NotEqual:                        return cfOperator;
            case LTTS_Core.TokenID.Greater:                         return cfOperator;
            case LTTS_Core.TokenID.Less:                            return cfOperator;

            case LTTS_Core.TokenID.Star:                            return cfOperator;
            case LTTS_Core.TokenID.Divide:                          return cfOperator;
            case LTTS_Core.TokenID.Module:                          return cfOperator;
            case LTTS_Core.TokenID.Plus:                            return cfOperator;
            case LTTS_Core.TokenID.Minus:                           return cfOperator;
            case LTTS_Core.TokenID.BitNot:                          return cfOperator;
            case LTTS_Core.TokenID.BitOr:                           return cfOperator;
            case LTTS_Core.TokenID.BitAnd:                          return cfOperator;
            case LTTS_Core.TokenID.BitXor:                          return cfOperator;
            case LTTS_Core.TokenID.LessEqual:                       return cfOperator;
            case LTTS_Core.TokenID.GreaterEqual:                    return cfOperator;
            case LTTS_Core.TokenID.PlusAssign:                      return cfOperator;
            case LTTS_Core.TokenID.MinusAssign:                     return cfOperator;
            case LTTS_Core.TokenID.MultAssign:                      return cfOperator;
            case LTTS_Core.TokenID.DivAssign:                       return cfOperator;
            case LTTS_Core.TokenID.ModAssign:                       return cfOperator;
            case LTTS_Core.TokenID.AndAssign:                       return cfOperator;
            case LTTS_Core.TokenID.XorAssign:                       return cfOperator;
            case LTTS_Core.TokenID.OrAssign:                        return cfOperator;

            case LTTS_Core.TokenID.AND:                             return cfOperator;
            case LTTS_Core.TokenID.BETWEEN:                         return cfOperator;
            case LTTS_Core.TokenID.IN:                              return cfOperator;
            case LTTS_Core.TokenID.EXISTS:                          return cfOperator;
            case LTTS_Core.TokenID.NOT:                             return cfOperator;
            case LTTS_Core.TokenID.NULL:                            return cfOperator;
            case LTTS_Core.TokenID.OR:                              return cfOperator;

            case LTTS_Core.TokenID.ADD:                             return cfKeyword;
            case LTTS_Core.TokenID.ALL:                             return cfKeyword;
            case LTTS_Core.TokenID.ALTER:                           return cfKeyword;
            case LTTS_Core.TokenID.ANY:                             return cfKeyword;
            case LTTS_Core.TokenID.APPLY:                           return cfKeyword;
            case LTTS_Core.TokenID.AS:                              return cfKeyword;
            case LTTS_Core.TokenID.ASC:                             return cfKeyword;
            case LTTS_Core.TokenID.ASSEMBLY:                        return cfKeyword;
            case LTTS_Core.TokenID.AUTHORIZATION:                   return cfKeyword;
            case LTTS_Core.TokenID.BACKUP:                          return cfKeyword;
            case LTTS_Core.TokenID.BEGIN:                           return cfKeyword;
            case LTTS_Core.TokenID.BREAK:                           return cfKeyword;
            case LTTS_Core.TokenID.BROWSE:                          return cfKeyword;
            case LTTS_Core.TokenID.BULK:                            return cfKeyword;
            case LTTS_Core.TokenID.BY:                              return cfKeyword;
            case LTTS_Core.TokenID.CASCADE:                         return cfKeyword;
            case LTTS_Core.TokenID.CASE:                            return cfKeyword;
            case LTTS_Core.TokenID.CAST:                            return cfKeyword;
            case LTTS_Core.TokenID.CATCH:                           return cfKeyword;
            case LTTS_Core.TokenID.CHECK:                           return cfKeyword;
            case LTTS_Core.TokenID.CHECKPOINT:                      return cfKeyword;
            case LTTS_Core.TokenID.CLOSE:                           return cfKeyword;
            case LTTS_Core.TokenID.CLUSTERED:                       return cfKeyword;
            case LTTS_Core.TokenID.COALESCE:                        return cfKeyword;
            case LTTS_Core.TokenID.COLLATE:                         return cfKeyword;
            case LTTS_Core.TokenID.COLUMN:                          return cfKeyword;
            case LTTS_Core.TokenID.COMMIT:                          return cfKeyword;
            case LTTS_Core.TokenID.COMPUTE:                         return cfKeyword;
            case LTTS_Core.TokenID.CONSTRAINT:                      return cfKeyword;
            case LTTS_Core.TokenID.CONTAINS:                        return cfKeyword;
            case LTTS_Core.TokenID.CONTAINSTABLE:                   return cfKeyword;
            case LTTS_Core.TokenID.CONTINUE:                        return cfKeyword;
            case LTTS_Core.TokenID.CONVERT:                         return cfKeyword;
            case LTTS_Core.TokenID.CREATE:                          return cfKeyword;
            case LTTS_Core.TokenID.CROSS:                           return cfKeyword;
            case LTTS_Core.TokenID.CURRENT:                         return cfKeyword;
            case LTTS_Core.TokenID.CURSOR:                          return cfKeyword;
            case LTTS_Core.TokenID.DATABASE:                        return cfKeyword;
            case LTTS_Core.TokenID.DBCC:                            return cfKeyword;
            case LTTS_Core.TokenID.DEALLOCATE:                      return cfKeyword;
            case LTTS_Core.TokenID.DECLARE:                         return cfKeyword;
            case LTTS_Core.TokenID.DEFAULT:                         return cfKeyword;
            case LTTS_Core.TokenID.DELETE:                          return cfKeyword;
            case LTTS_Core.TokenID.DENY:                            return cfKeyword;
            case LTTS_Core.TokenID.DEPENDENTASSEMBLY:               return cfKeyword;
            case LTTS_Core.TokenID.DESC:                            return cfKeyword;
            case LTTS_Core.TokenID.DISK:                            return cfKeyword;
            case LTTS_Core.TokenID.DISTINCT:                        return cfKeyword;
            case LTTS_Core.TokenID.DISTRIBUTED:                     return cfKeyword;
            case LTTS_Core.TokenID.DOUBLE:                          return cfKeyword;
            case LTTS_Core.TokenID.DROP:                            return cfKeyword;
            case LTTS_Core.TokenID.DUMP:                            return cfKeyword;
            case LTTS_Core.TokenID.ELSE:                            return cfKeyword;
            case LTTS_Core.TokenID.END:                             return cfKeyword;
            case LTTS_Core.TokenID.ERRLVL:                          return cfKeyword;
            case LTTS_Core.TokenID.ESCAPE:                          return cfKeyword;
            case LTTS_Core.TokenID.EXCEPT:                          return cfKeyword;
            case LTTS_Core.TokenID.EXEC:                            return cfKeyword;
            case LTTS_Core.TokenID.EXECUTE:                         return cfKeyword;
            case LTTS_Core.TokenID.EXIT:                            return cfKeyword;
            case LTTS_Core.TokenID.EXTERNAL:                        return cfKeyword;
            case LTTS_Core.TokenID.FETCH:                           return cfKeyword;
            case LTTS_Core.TokenID.FILE:                            return cfKeyword;
            case LTTS_Core.TokenID.FILLFACTOR:                      return cfKeyword;
            case LTTS_Core.TokenID.FOR:                             return cfKeyword;
            case LTTS_Core.TokenID.FOREIGN:                         return cfKeyword;
            case LTTS_Core.TokenID.FREETEXT:                        return cfKeyword;
            case LTTS_Core.TokenID.FREETEXTTABLE:                   return cfKeyword;
            case LTTS_Core.TokenID.FROM:                            return cfKeyword;
            case LTTS_Core.TokenID.FULL:                            return cfKeyword;
            case LTTS_Core.TokenID.FUNCTION:                        return cfKeyword;
            case LTTS_Core.TokenID.GOTO:                            return cfKeyword;
            case LTTS_Core.TokenID.GRANT:                           return cfKeyword;
            case LTTS_Core.TokenID.GROUP:                           return cfKeyword;
            case LTTS_Core.TokenID.HANDLERCONFIG:                   return cfKeyword;
            case LTTS_Core.TokenID.HAVING:                          return cfKeyword;
            case LTTS_Core.TokenID.HOLDLOCK:                        return cfKeyword;
            case LTTS_Core.TokenID.IDENTITY:                        return cfKeyword;
            case LTTS_Core.TokenID.IDENTITY_INSERT:                 return cfKeyword;
            case LTTS_Core.TokenID.IDENTITYCOL:                     return cfKeyword;
            case LTTS_Core.TokenID.IF:                              return cfKeyword;
            case LTTS_Core.TokenID.INDEX:                           return cfKeyword;
            case LTTS_Core.TokenID.INNER:                           return cfKeyword;
            case LTTS_Core.TokenID.INSERT:                          return cfKeyword;
            case LTTS_Core.TokenID.INTERSECT:                       return cfKeyword;
            case LTTS_Core.TokenID.INTO:                            return cfKeyword;
            case LTTS_Core.TokenID.IS:                              return cfKeyword;
            case LTTS_Core.TokenID.JOIN:                            return cfKeyword;
            case LTTS_Core.TokenID.KEY:                             return cfKeyword;
            case LTTS_Core.TokenID.KILL:                            return cfKeyword;
            case LTTS_Core.TokenID.LEFT:                            return cfKeyword;
            case LTTS_Core.TokenID.LIKE:                            return cfKeyword;
            case LTTS_Core.TokenID.LINENO:                          return cfKeyword;
            case LTTS_Core.TokenID.LOAD:                            return cfKeyword;
            case LTTS_Core.TokenID.MERGE:                           return cfKeyword;
            case LTTS_Core.TokenID.METHOD:                          return cfKeyword;
            case LTTS_Core.TokenID.NATIONAL:                        return cfKeyword;
            case LTTS_Core.TokenID.NOCHECK:                         return cfKeyword;
            case LTTS_Core.TokenID.NONCLUSTERED:                    return cfKeyword;
            case LTTS_Core.TokenID.OF:                              return cfKeyword;
            case LTTS_Core.TokenID.OFF:                             return cfKeyword;
            case LTTS_Core.TokenID.OFFSETS:                         return cfKeyword;
            case LTTS_Core.TokenID.ON:                              return cfKeyword;
            case LTTS_Core.TokenID.OPEN:                            return cfKeyword;
            case LTTS_Core.TokenID.OPTION:                          return cfKeyword;
            case LTTS_Core.TokenID.ORDER:                           return cfKeyword;
            case LTTS_Core.TokenID.OUTER:                           return cfKeyword;
            case LTTS_Core.TokenID.OVER:                            return cfKeyword;
            case LTTS_Core.TokenID.PERCENT:                         return cfKeyword;
            case LTTS_Core.TokenID.PIVOT:                           return cfKeyword;
            case LTTS_Core.TokenID.PLAN:                            return cfKeyword;
            case LTTS_Core.TokenID.PRECISION:                       return cfKeyword;
            case LTTS_Core.TokenID.PRIMARY:                         return cfKeyword;
            case LTTS_Core.TokenID.PRINT:                           return cfKeyword;
            case LTTS_Core.TokenID.PROC:                            return cfKeyword;
            case LTTS_Core.TokenID.PROCEDURE:                       return cfKeyword;
            case LTTS_Core.TokenID.PROPERTY:                        return cfKeyword;
            case LTTS_Core.TokenID.RAISERROR:                       return cfKeyword;
            case LTTS_Core.TokenID.READ:                            return cfKeyword;
            case LTTS_Core.TokenID.READTEXT:                        return cfKeyword;
            case LTTS_Core.TokenID.RECONFIGURE:                     return cfKeyword;
            case LTTS_Core.TokenID.REFERENCES:                      return cfKeyword;
            case LTTS_Core.TokenID.REPLICATION:                     return cfKeyword;
            case LTTS_Core.TokenID.REQUIRED:                        return cfKeyword;
            case LTTS_Core.TokenID.RESTORE:                         return cfKeyword;
            case LTTS_Core.TokenID.RESTRICT:                        return cfKeyword;
            case LTTS_Core.TokenID.RETURN:                          return cfKeyword;
            case LTTS_Core.TokenID.RETURNS:                         return cfKeyword;
            case LTTS_Core.TokenID.REVERT:                          return cfKeyword;
            case LTTS_Core.TokenID.REVOKE:                          return cfKeyword;
            case LTTS_Core.TokenID.RIGHT:                           return cfKeyword;
            case LTTS_Core.TokenID.ROLLBACK:                        return cfKeyword;
            case LTTS_Core.TokenID.ROWGUIDCOL:                      return cfKeyword;
            case LTTS_Core.TokenID.RULE:                            return cfKeyword;
            case LTTS_Core.TokenID.SAVE:                            return cfKeyword;
            case LTTS_Core.TokenID.SCHEMA:                          return cfKeyword;
            case LTTS_Core.TokenID.SECURITYAUDIT:                   return cfKeyword;
            case LTTS_Core.TokenID.SELECT:                          return cfKeyword;
            case LTTS_Core.TokenID.SET:                             return cfKeyword;
            case LTTS_Core.TokenID.SETUSER:                         return cfKeyword;
            case LTTS_Core.TokenID.SHUTDOWN:                        return cfKeyword;
            case LTTS_Core.TokenID.SOME:                            return cfKeyword;
            case LTTS_Core.TokenID.SOURCE:                          return cfKeyword;
            case LTTS_Core.TokenID.STATIC:                          return cfKeyword;
            case LTTS_Core.TokenID.STATISTICS:                      return cfKeyword;
            case LTTS_Core.TokenID.TABLE:                           return cfKeyword;
            case LTTS_Core.TokenID.TABLESAMPLE:                     return cfKeyword;
            case LTTS_Core.TokenID.TEXTSIZE:                        return cfKeyword;
            case LTTS_Core.TokenID.THEN:                            return cfKeyword;
            case LTTS_Core.TokenID.THROW:                           return cfKeyword;
            case LTTS_Core.TokenID.TO:                              return cfKeyword;
            case LTTS_Core.TokenID.TRAN:                            return cfKeyword;
            case LTTS_Core.TokenID.TRANSACTION:                     return cfKeyword;
            case LTTS_Core.TokenID.TRIGGER:                         return cfKeyword;
            case LTTS_Core.TokenID.TRUNCATE:                        return cfKeyword;
            case LTTS_Core.TokenID.TRY:                             return cfKeyword;
            case LTTS_Core.TokenID.TSEQUAL:                         return cfKeyword;
            case LTTS_Core.TokenID.TYPE:                            return cfKeyword;
            case LTTS_Core.TokenID.UNION:                           return cfKeyword;
            case LTTS_Core.TokenID.UNIQUE:                          return cfKeyword;
            case LTTS_Core.TokenID.UNPIVOT:                         return cfKeyword;
            case LTTS_Core.TokenID.UPDATE:                          return cfKeyword;
            case LTTS_Core.TokenID.UPDATETEXT:                      return cfKeyword;
            case LTTS_Core.TokenID.USE:                             return cfKeyword;
            case LTTS_Core.TokenID.VALUES:                          return cfKeyword;
            case LTTS_Core.TokenID.VARYING:                         return cfKeyword;
            case LTTS_Core.TokenID.VIEW:                            return cfKeyword;
            case LTTS_Core.TokenID.WAITFOR:                         return cfKeyword;
            case LTTS_Core.TokenID.WHEN:                            return cfKeyword;
            case LTTS_Core.TokenID.WHERE:                           return cfKeyword;
            case LTTS_Core.TokenID.WHILE:                           return cfKeyword;
            case LTTS_Core.TokenID.WITH:                            return cfKeyword;
            case LTTS_Core.TokenID.WRITETEXT:                       return cfKeyword;
            }

            return null;
        }
    }
}
